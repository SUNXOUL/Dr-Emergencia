@page "/Inventario"
@page "/Inventario/{ArticuloID:int}"



@inject ArticuloBLL Articulos
@inject EntradaBLL Entradas
@inject SalidaBLL Salidas
@inject NotificationService notificationService
@inject SuplidorBLL suplidores

<head>
    <style>
        .hidden{
            display: none;
        }

        .form-select{
            border: none;
            width: 150px;
        }
        .form-floating {
            width: 15%;
        }
            .Entrada{
        display: flex;
        padding: 5px;
        align-items: center;
        width: 100%;
    }
    .Entrada input{
        border-radius: 50px;
        background-color:#D9D9D9;
        border-color: #D9D9D9;
        border: 15px;
        width: 100%;
    }
    .Entrada label
    {
        margin: 5px;
    }
    .Entrada textarea{
        background-color:#D9D9D9;
        border-color: #D9D9D9;
        border-radius: 15px;
        width: 100%;
    }
                        body {
            background-image: url('https://wallpaper.dog/large/903575.jpg');
            background-attachment: fixed;
            background-size: cover;
            opacity:0.9;
        }


    </style>
</head>
<body>
    <RadzenCard class="rz-shadow-7 rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12">
    <RadzenFieldset>
            <HeaderTemplate>
            <span class="d-inline-flex align-items-center align-middle">
                <RadzenIcon Icon="emergency" class="me-1" /><b>Inventario</b>
            </span>
        </HeaderTemplate>
        <ChildContent>

<div style="Display:flex;">    
<RadzenTextBox  Placeholder="Busque Descripcion" @bind-Value="Buscado" style="width:100%;" />
</div>

<RadzenTabs>
    <Tabs>
        
        <RadzenTabsItem Text="Proceso Inventario" >
            <div style="display:flex; justify-items:center;">
        <div class="Entrada" style="display:flex; justify-items:center;">
            <label for="Descripcion">Articulo</label>
            <RadzenTextBox type="Descripcion" id="Descripcion"  Disabled="true" @bind-Value="articulo.Descripcion" name="Descripcion"/>
        </div>
                <div class="Entrada"style="display:flex; justify-items:center;">
            <label for="Descripcion">Cantidad Actual</label>
            <RadzenNumeric  id="Descripcion" Disabled="true" ShowUpDown="false"  @bind-Value="articulo.Existencia" name="Descripcion"/>
        </div>
                <div class="input-group Entrada"style="display:flex; justify-items:center;">
            
            <div class="input-group ">
                <label for="value">Nueva Cantidad</label>
                <RadzenNumeric  id="Value" @bind-Value="entrada.Cantidad" ShowUpDown="false"   name="value"/>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="PInventario"><RadzenIcon Icon="done" /></RadzenButton>
            </div>
            
        </div>
        </div>
        

        </RadzenTabsItem >
        <RadzenTabsItem Text="Ajuste" >
                <div style="display:flex; justify-items:center;">
            <div class="Entrada" style="display:flex; justify-items:center;">
                <label for="Descripcion">Articulo</label>
                <RadzenTextBox type="Descripcion" id="Descripcion"  Disabled="true" @bind-Value="articulo.Descripcion" name="Descripcion"/>
            </div>
                    <div class="Entrada" style="display:flex; justify-items:center;">
                <label for="Descripcion">Cantidad Actual</label>
                <RadzenNumeric  id="Descripcion" Disabled="true" ShowUpDown="false"  @bind-Value="articulo.Existencia" name="Descripcion"/>
            </div>
            <div class="Entrada"style="display:flex; justify-items:center;" >
                <div class="input-group ">
                    <label for="Value">Cantidad de Ajuste</label>
                    <RadzenNumeric  id="Value" @bind-Value="entrada.Cantidad" ShowUpDown="false"  name="value"/>
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="Entrada"><RadzenIcon Icon="done" /></RadzenButton>
                </div>
            </div>

            
            </div>
        </RadzenTabsItem>
        

        </Tabs>
</RadzenTabs>


<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
    AllowGrouping="true" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
    Data="Articulos.FindList(Buscado)" TItem="Articulo" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">

        <Columns>
                <RadzenDataGridColumn Filterable="false" Sortable="false" TItem="Articulo" Frozen="true" Title="Acciones">
            <Template Context="Item">
                <RadzenLink Path=@($"V_Articulo/{Item.ArticuloID}") ><RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="Ver" /></RadzenLink>
                <button @onclick="() => Buscar(Item.ArticuloID)" style="border:none;" ><RadzenBadge  BadgeStyle="BadgeStyle.Info"  Text="Seleccionar"   /></button>
            </Template>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Articulo" Property="ArticuloID" Title="Codigo" />
            <RadzenDataGridColumn TItem="Articulo" Property="Descripcion" Title="Descripcion" />
            <RadzenDataGridColumn TItem="Articulo" Property="Precio" Title="Precio" />
            <RadzenDataGridColumn TItem="Articulo" Property="Costo" Title="Costo" />
            <RadzenDataGridColumn TItem="Articulo" Property="Existencia" Title="Existencia" />
            <RadzenDataGridColumn Filterable="true" Sortable="false" TItem="Articulo" Frozen="false" Title="Suplidor">
                <Template Context="Item">
                    @suplidores.Buscar(Item.SuplidorId).Nombre
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Filterable="true" Sortable="false" TItem="Articulo" Frozen="false" Title="Contacto">
                <Template Context="Item">
                    @suplidores.Buscar(Item.SuplidorId).Contacto
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>

    </ChildContent>
    </RadzenFieldset>
    </RadzenCard>
    </body>

@code {

        [Parameter]
        public int ArticuloID {get;set;}
        public Articulo articulo = new Articulo();
        public Salida salida { get; set; } = new Salida();
        public Entrada entrada { get; set; } = new Entrada();

        public  int Value { get; set; }
        
        public string Buscado { get; set; } ="";
        
        public void SetBuscado(string Value)
        {
            this.Buscado=Value;
        }
    
    protected override void OnInitialized()
    {
            this.articulo.ArticuloID=ArticuloID;
            Buscar();
    }
    

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    private void Buscar()
    {
        var ArticuloEncontrado = Articulos.Buscar(ArticuloID);
        if (ArticuloEncontrado != null)
        {
            Console.WriteLine($"Se encontro una ocupacion con el ID{this.articulo.ArticuloID}");
            this.articulo = ArticuloEncontrado;

        }
        else
        {
            Nuevo();
            Console.WriteLine("Id no existente");
        }
    }
        private void Buscar(int ID)
    {
        var ArticuloEncontrado = Articulos.Buscar(ID);
        if (ArticuloEncontrado != null)
        {
            Console.WriteLine($"Se encontro una ocupacion con el ID{this.articulo.ArticuloID}");
            this.articulo = ArticuloEncontrado;

        }
        else
        {
            Nuevo();
            Console.WriteLine("Id no existente");
        }
    }


    public void Nuevo()
    {
        this.articulo = new Articulo();
    }

    public void Guardar()
    {

        if(Articulos.Guardar(this.articulo))
        {
            this.Nuevo();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro Actualizado", Detail = "Guardado con Exito", Duration = 4000 });
        }

        //Console.WriteLine("Campos no validos o no completados");
    }


    public void PInventario()
    {
        if(Validar())
        {
            entrada.Razon ="Proceso de Inventario";
            entrada.cantidad_anterior = this.articulo.Existencia;
            entrada.ArticuloID = this.articulo.ArticuloID;
            entrada.cantidad_Resultante = this.entrada.Cantidad;
            if(Entradas.Inventario(this.entrada))
            {
                this.Nuevo();
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro Actualizado", Detail = "Guardado con Exito", Duration = 4000 });

            }
            this.entrada = new Entrada();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erorr de Inventario", Detail = "Campos invalidos", Duration = 4000 });
        }
    }

    public void Entrada()
    {
        if(Validar() && this.entrada.Cantidad > 0)
        {
            entrada.Razon="Ajuste Inventario";
            entrada.cantidad_anterior = this.articulo.Existencia;
            entrada.ArticuloID=this.articulo.ArticuloID;
            entrada.cantidad_Resultante = this.entrada.Cantidad + entrada.cantidad_anterior;
            if(Entradas.Guardar(this.entrada))
            {
                this.Nuevo();
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro Actualizado", Detail = "Guardado con Exito", Duration = 4000 });
            }
            this.entrada = new Entrada();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erorr de Ajuste", Detail = "Campos invalidos", Duration = 4000 });
        }
    }

    public bool Validar()
    {
        if(this.articulo.Descripcion != null && this.entrada.Cantidad != null)
        {
            System.Console.WriteLine("Pase 1");
                return true;
        }
        else
        {
            return false;
        }
    }

}