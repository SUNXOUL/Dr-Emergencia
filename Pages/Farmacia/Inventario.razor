@page "/Inventario"
@page "/Inventario/{ArticuloID:int}"
<h3>Inventario</h3>


@inject ArticuloBLL Articulos
@inject EntradaBLL Entradas
@inject SalidaBLL Salidas
@inject NotificationService notificationService

<head>
    <style>
        .hidden{
            display: none;
        }

        .form-select{
            border: none;
            width: 150px;
        }
        .form-floating {
            width: 15%;
        }
            .Entrada{
        display: flex;
        padding: 5px;
        align-items: center;
        width: 100%;
    }
    .Entrada input{
        border-radius: 50px;
        background-color:#D9D9D9;
        border-color: #D9D9D9;
        border: 15px;
        margin: 5px;
        width: 100%;
    }
    .Entrada label
    {
        margin: 5px;
    }
    .Entrada textarea{
        background-color:#D9D9D9;
        border-color: #D9D9D9;
        border-radius: 15px;
        width: 100%;
    }

    </style>
</head>

<div style="Display:flex;">    
<RadzenTextBox  Placeholder="Busque Descripcion" @bind-Value="Buscado" style="width:100%;" />
</div>

<RadzenTabs>
    <Tabs>
        
        <RadzenTabsItem Text="Proceso Inventario" >
            <div style="display:flex; justify-items:center;">
        <div class="Entrada" style="display:flex; justify-items:center;">
            <label for="Descripcion">Articulo</label>
            <RadzenTextBox type="Descripcion" id="Descripcion"  Disabled="true" @bind-Value="articulo.Descripcion" name="Descripcion"/>
        </div>
                <div class="Entrada"style="display:flex; justify-items:center;">
            <label for="Descripcion">Cantidad Actual</label>
            <RadzenNumeric  id="Descripcion" Disabled="true" ShowUpDown="false"  @bind-Value="articulo.Existencia" name="Descripcion"/>
        </div>
                <div class="input-group Entrada"style="display:flex; justify-items:center;">
            
            <div class="input-group ">
                <label for="value">Nueva Cantidad</label>
                <RadzenNumeric  id="Value" @bind-Value="Value" ShowUpDown="false"   name="value"/>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="PInventario"><RadzenIcon Icon="done" /></RadzenButton>
            </div>
            
        </div>
        </div>
        

        </RadzenTabsItem >
        <RadzenTabsItem Text="Ajuste" >
                <div style="display:flex; justify-items:center;">
            <div class="Entrada" style="display:flex; justify-items:center;">
                <label for="Descripcion">Articulo</label>
                <RadzenTextBox type="Descripcion" id="Descripcion"  Disabled="true" @bind-Value="articulo.Descripcion" name="Descripcion"/>
            </div>
                    <div class="Entrada" style="display:flex; justify-items:center;">
                <label for="Descripcion">Cantidad Actual</label>
                <RadzenNumeric  id="Descripcion" Disabled="true" ShowUpDown="false"  @bind-Value="articulo.Existencia" name="Descripcion"/>
            </div>
                    <div class="Entrada"style="display:flex; justify-items:center;" >
                        <div class="input-group ">
                <label for="Value">Cantidad de Ajuste</label>
                <RadzenNumeric  id="Value" @bind-Value="entrada.Cantidad" ShowUpDown="false"  name="value"/>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="Entrada"><RadzenIcon Icon="done" /></RadzenButton>
                </div>
            </div>

            
            </div>
        </RadzenTabsItem>
        

        </Tabs>
</RadzenTabs>


<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
    AllowGrouping="true" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
    Data="Articulos.FindList(Buscado)" TItem="Articulo" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">

        <Columns>
                <RadzenDataGridColumn Filterable="false" Sortable="false" TItem="Articulo" Frozen="true" Title="Acciones">
            <Template Context="Item">
                <RadzenLink Path=@($"V_Articulo/{Item.ArticuloID}") ><RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="Ver" /></RadzenLink>
                <button @onclick="() => Buscar(Item.ArticuloID)" style="border:none;" ><RadzenBadge  BadgeStyle="BadgeStyle.Info"  Text="Seleccionar"   /></button>
            </Template>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Articulo" Property="ArticuloID" Title="Codigo" />
            <RadzenDataGridColumn TItem="Articulo" Property="Descripcion" Title="Descripcion" />
            <RadzenDataGridColumn TItem="Articulo" Property="Precio" Title="Precio" />
            <RadzenDataGridColumn TItem="Articulo" Property="Costo" Title="Costo" />
            <RadzenDataGridColumn TItem="Articulo" Property="Existencia" Title="Existencia" />
        </Columns>

    </RadzenDataGrid>

@code {

        [Parameter]
        public int ArticuloID {get;set;}
        public Articulo articulo = new Articulo();
        public Salida salida { get; set; } = new Salida();
        public Entrada entrada { get; set; } = new Entrada();

        public  int Value { get; set; }
        
        public string Buscado { get; set; } ="";
        
        public void SetBuscado(string Value)
        {
            this.Buscado=Value;
        }
    
    protected override void OnInitialized()
    {
            this.articulo.ArticuloID=ArticuloID;
            Buscar();
    }
    

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    private void Buscar()
    {
        var ArticuloEncontrado = Articulos.Buscar(ArticuloID);
        if (ArticuloEncontrado != null)
        {
            Console.WriteLine($"Se encontro una ocupacion con el ID{this.articulo.ArticuloID}");
            this.articulo = ArticuloEncontrado;

        }
        else
        {
            Nuevo();
            Console.WriteLine("Id no existente");
        }
    }
        private void Buscar(int ID)
    {
        var ArticuloEncontrado = Articulos.Buscar(ID);
        if (ArticuloEncontrado != null)
        {
            Console.WriteLine($"Se encontro una ocupacion con el ID{this.articulo.ArticuloID}");
            this.articulo = ArticuloEncontrado;

        }
        else
        {
            Nuevo();
            Console.WriteLine("Id no existente");
        }
    }


    public void Nuevo()
    {
        this.articulo = new Articulo();
    }

    public void Guardar()
    {

        if(Articulos.Guardar(this.articulo))
        {
            this.Nuevo();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro Actualizado", Detail = "Guardado con Exito", Duration = 4000 });
        }

        //Console.WriteLine("Campos no validos o no completados");
    }


    public void PInventario()
    {
        if(Value >=0)
        {
        this.articulo.Existencia=Value;
        Guardar();
        }
        this.Value=0;
    }

    public void Entrada()
    {
        entrada.Razon="Ajuste Inventario";
        entrada.ArticuloID=this.articulo.ArticuloID;
        if(Entradas.Guardar(this.entrada))
        {
            this.Nuevo();
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro Actualizado", Detail = "Guardado con Exito", Duration = 4000 });
        }
        this.entrada = new Entrada();
    }

}