@page "/Entradas"

@inject NotificationService notificationService
@inject ArticuloBLL ArticuloBLL
@inject  EntradaBLL EntradaBLL

<head>
    <style>
        .Entrada {
            display: inline-block;
            padding: 5px;
            align-items: center;
            
        }

        .Entrada input {
            border-radius: 50px;
            background-color: #D9D9D9;
            border-color: #D9D9D9;
            border: 15px;
            margin: 5px;
            
        }

        .Entrada label {
            margin: 5px;
        }

        .Entrada textarea {
            background-color: #D9D9D9;
            border-color: #D9D9D9;
            border-radius: 15px;
            width: 100%;
        }

        .Entrada select {
            width: 200px;
            height: 35px;
            border-radius: 50px;
            background-color: #D9D9D9;
            border-color: #D9D9D9;
            border: 15px;
            margin: 5px;
        }


        body {
            background-color: white;
        }
    </style>
</head>

<body>
    

<h1>Entradas</h1>
    
    <RadzenDropDown AllowClear="true" TValue="int"  @bind-Value="entrada.ArticuloID"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
    class="w-100" Name="Articulo" Placeholder="articulo"  Data="ArticuloBLL.GetList()" TextProperty= "Descripcion"
    ValueProperty="ArticuloID" style="border-radius: 50px; background-color: #D9D9D9; border-color: #D9D9D9; border: 15px; margin: 5px;"
    />

    <div style="display: flex; align-items: flex-end;">
        <div class="Entrada">
        <label for="Costo">Cantidad:</label>
        <RadzenNumeric  ShowUpDown="false" style="border-radius: 50px; background-color: #D9D9D9; border-color: #D9D9D9; border: 15px; margin: 5px;"  name="Cantidad" @bind-Value="entrada.Cantidad"/>
    </div>
        <div class="Entrada">
        <label for="Razon">Razon:</label>
        <RadzenTextBox  name="Razon" @bind-Value="entrada.Razon"/>
    </div>
        <div class="Entrada">
        <label for="Precio">Fecha:</label>
        <RadzenDatePicker @bind-Value=@entrada.Fecha ShowTime="true" HourFormat="12" DateFormat="MM/dd/yyyy h:mm tt" />
    </div>
    </div>
    <center>
        <button type="button" class="btn btn-primary"
            style="padding-left: 50px;padding-right: 50px; border-radius:50px; Background-Color:#3AB5F4; border-color:#3AB5F4; margin:10px;"
            @onclick="Guardar">Registrar</button>
    </center>
<hr>
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
    AllowGrouping="true" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
    Data="EntradaBLL.GetList()" TItem="Entrada" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">

        <Columns>
                <RadzenDataGridColumn Filterable="false" Sortable="false" TItem="Articulo" Frozen="true" Title="Acciones">
            <Template Context="Item">
                <RadzenLink Path=@($"V_Articulo/{Item.ArticuloID}") Text="Ver" />
            </Template>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Entrada" Property="ArticuloID" Title="Articulo"/>
            <RadzenDataGridColumn TItem="Entrada" Property="cantidad_anterior" Title="Cantidad Anterior"/>
            <RadzenDataGridColumn TItem="Entrada" Property="Cantidad" Title="Cantidad de Ajuste"/>
            <RadzenDataGridColumn Filterable="true" Sortable="false" TItem="Entrada" Frozen="false" Title="Cantidad Actual">
                <Template Context="Item">
                    @ArticuloBLL.Buscar(Item.ArticuloID).Existencia
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Entrada" Property="Razon" Title="Razon"/>
            <RadzenDataGridColumn TItem="Entrada" Property="Fecha" Title="Fecha"/>


        </Columns>

    </RadzenDataGrid>

</body>
@code {
    public Entrada entrada { get; set; } = new Entrada();

    
    
    protected override void OnInitialized()
    {

    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }


    public void Nuevo()
    {
        this.entrada = new Entrada();
    }



    public void Guardar()
    {
        if(Validar())
        {
            if(EntradaBLL.Guardar(this.entrada))
            {
                this.Nuevo();
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro Actualizado", Detail = "Guardado con Exito", Duration = 4000 });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erorr de entrada", Detail = "Campos invalidos", Duration = 4000 });

        }


        //Console.WriteLine("Campos no validos o no completados");
    }

    public bool Validar()
    {
        if(this.entrada.ArticuloID!= null && this.entrada.Cantidad != null&& this.entrada.Razon != null && this.entrada.Fecha != null)
        {
            System.Console.WriteLine("Pase 1");
                return true;
        }
        else
        {
            return false;
        }
    }
}
